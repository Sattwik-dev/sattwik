import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

public class Calculator extends JFrame implements ActionListener {
    private JTextField display;
    private ArrayList<String> history;
    private StringBuilder currentInput;
    private String lastOperation;
    private double lastValue;

    public Calculator() {
        history = new ArrayList<>();
        currentInput = new StringBuilder();
        lastOperation = "";
        lastValue = 0;

        setTitle("Calculator");
        setSize(400, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        display = new JTextField();
        display.setEditable(false);
        display.setFont(new Font("Arial", Font.PLAIN, 24));
        add(display, BorderLayout.NORTH);

        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(5, 4));

        String[] buttons = {
            "7", "8", "9", "/",
            "4", "5", "6", "*",
            "1", "2", "3", "-",
            "0", "C", "=", "+",
            "History", "sqrt", "pow", "log"
        };

        for (String text : buttons) {
            JButton button = new JButton(text);
            button.addActionListener(this);
            buttonPanel.add(button);
        }

        add(buttonPanel, BorderLayout.CENTER);
        setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        String command = e.getActionCommand();

        if (command.charAt(0) >= '0' && command.charAt(0) <= '9') {
            currentInput.append(command);
            display.setText(currentInput.toString());
        } else if (command.equals("C")) {
            currentInput.setLength(0);
            display.setText("");
        } else if (command.equals("=")) {
            calculate();
        } else if (command.equals("History")) {
            showHistory();
        } else if (command.equals("sqrt")) {
            double value = Double.parseDouble(currentInput.toString());
            double result = Math.sqrt(value);
            addToHistory(value + " sqrt = " + result);
            display.setText(String.valueOf(result));
            currentInput.setLength(0);
        } else if (command.equals("pow")) {
            double value = Double.parseDouble(currentInput.toString());
            double result = Math.pow(value, 2);
            addToHistory(value + " pow = " + result);
            display.setText(String.valueOf(result));
            currentInput.setLength(0);
        } else if (command.equals("log")) {
            double value = Double.parseDouble(currentInput.toString());
            double result = Math.log(value);
            addToHistory(value + " log = " + result);
            display.setText(String.valueOf(result));
            currentInput.setLength(0);
        } else {
            if (currentInput.length() > 0) {
                lastValue = Double.parseDouble(currentInput.toString());
                currentInput.setLength(0);
            }
            lastOperation = command;
        }
    }

    private void calculate() {
        if (lastOperation.isEmpty() || currentInput.length() == 0) {
            return;
        }

        double currentValue = Double.parseDouble(currentInput.toString());
        double result = 0;

        switch (lastOperation) {
            case "+":
                result = lastValue + currentValue;
                break;
            case "-":
                result = lastValue - currentValue;
                break;
            case "*":
                result = lastValue * currentValue;
                break;
            case "/":
                if (currentValue != 0) {
                    result = lastValue / currentValue;
                } else {
                    display.setText("Error");
                    return;
                }
                break;
        }

        addToHistory(lastValue + " " + lastOperation + " " + currentValue + " = " + result);
        display.setText(String.valueOf(result));
        currentInput.setLength(0);
        lastOperation = "";
    }

    private void addToHistory(String entry) {
        history.add(entry);
    }

    private void showHistory() {
        StringBuilder historyText = new StringBuilder("History:\n");
        for (String entry : history) {
            historyText.append(entry).append("\n");
        }
        JOptionPane.showMessageDialog(this,